module.exports = {
  configs: {
    recommended: {
      extends: ['plugin:@okta/okta/recommended'],
      overrides: [
        {
          files: ['*.js', '*.jsx', '*.ts', '*.tsx'],
          env: { commonjs: true },
          extends: [
            'eslint:recommended',
            'plugin:import/errors',
            'plugin:import/warnings',
            require.resolve('./i18n'),
            require.resolve('./react'),
            'okta',
          ],
          parserOptions: {
            ecmaFeatures: {
              modules: true,
            },
            ecmaVersion: 2018,
            sourceType: 'module',
          },
          rules: {
            'array-bracket-spacing': ['error', 'never'],
            camelcase: ['error', { allow: ['^UNSAFE_'] }],
            'comma-dangle': ['error', {
              arrays: 'always-multiline',
              objects: 'always-multiline',
            }],
            'comma-spacing': ['error', { before: false, after: true }],
            'comma-style': ['error', 'last'],
            'computed-property-spacing': ['error', 'never'],
            'default-case': 'off',
            'dot-location': ['error', 'property'],
            'dot-notation': 'off',
            'eol-last': 'error',
            'func-call-spacing': ['error', 'never'],
            'guard-for-in': 'error',
            indent: ['error', 2, { VariableDeclarator: { var: 2, let: 2, const: 3 }, SwitchCase: 1 }],
            'key-spacing': ['error', { beforeColon: false, afterColon: true }],
            'keyword-spacing': ['error', { before: true, after: true }],
            'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
            'linebreak-style': ['error', 'unix'],
            'max-len': ['error', 180],
            'max-params': ['error', 5],
            'no-array-constructor': 'error',
            'no-console': 'error',
            'no-empty': 'error',
            'no-extra-bind': 'error',
            'no-extra-parens': ['error', 'all', { nestedBinaryExpressions: false }],
            'no-implied-eval': 'error',
            'no-lone-blocks': 'error',
            'no-mixed-operators': 'off',
            'no-multi-spaces': 'error',
            'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 0 }],
            'no-multi-str': 'off',
            'no-new': 'error',
            'no-plusplus': 'off',
            'no-proto': 'error',
            'no-self-compare': 'error',
            'no-sequences': 'error',
            'no-template-curly-in-string': 'error',
            'no-throw-literal': 'error',
            'no-trailing-spaces': ['error', { ignoreComments: true }],
            'no-undef': 'off',
            'no-unmodified-loop-condition': 'error',
            'no-unneeded-ternary': ['error', { defaultAssignment: false }],
            'no-unused-expressions': ['error', { allowShortCircuit: true, allowTernary: true }],
            'no-use-before-define': ['error', 'nofunc'],
            'no-useless-call': 'error',
            'no-useless-computed-key': 'error',
            'no-useless-constructor': 'error',
            'no-useless-rename': 'error',
            'no-useless-return': 'error',
            'no-whitespace-before-property': 'error',
            'object-curly-newline': ['error', { consistent: true }],
            'one-var': ['error', { initialized: 'never' }],
            'operator-linebreak': ['error', 'before'],
            'padded-blocks': ['error', { blocks: 'never', switches: 'never', classes: 'never' }],
            'quote-props': ['error', 'as-needed'],
            quotes: ['error', 'single'],
            'rest-spread-spacing': ['error', 'never'],
            semi: 'error',
            'semi-spacing': 'error',
            'space-before-function-paren': ['error', { anonymous: 'always', named: 'never' }],
            'space-in-parens': ['error', 'never'],
            'space-infix-ops': 'error',
            'space-unary-ops': 'error',
            'spaced-comment': ['error', 'always', {
              line: { markers: ['*package', '!', '/', ',', '='] },
              block: { balanced: true, markers: ['*package', '!', ',', ':', '::', 'flow-include'], exceptions: ['*'] },
            }],
            strict: 'off',
            'unicode-bom': ['error', 'never'],
            'wrap-iife': ['error', 'any'],
            yoda: ['error', 'never'],
            'import/order': ['error', { groups: ['builtin', 'external', ['internal', 'parent', 'sibling'], 'index'] }],
            'import/newline-after-import': ['error'],
            'import/no-unresolved': 'off',
            'import/no-default-export': 'error',
          },
        },
        {
          files: ['*.ts', '*.tsx'],
          extends: [
            require.resolve('./typescript'),
          ],
        },
        {
          files: ['*.js', '*.jsx'],
          rules: {
            '@typescript-eslint/indent': 'off',
            '@typescript-eslint/no-use-before-define': 'off',
            '@typescript-eslint/no-var-requires': 'off',
            '@typescript-eslint/no-unused-vars': 'off',
          },
        },
        {
          files: ['*.stories.tsx'],
          rules: {
            'import/no-default-export': 'off',
            'i18next/no-literal-string': 'off',
          },
        },
        {
          files: [
            // Test and configuration files
            '*{.,_}spec.{ts,tsx}',
            '**/packages/**/*.{conf,config}.js',
          ],
          rules: {
            'i18next/no-literal-string': 'off',
          },
        },
        {
          files: ['*.properties'],
          rules: {
            '@okta/okta/no-missing-i18n-comments': [2, { templateDelimiters: ['{{', '}}'] }],
          },
        },
        {
          files: [
            '**/enduser-v2.properties', // 100
          ],
          rules: {
            '@okta/okta/no-missing-i18n-comments': 'warn',
          },
        },
      ],
      settings: {
        'import/extensions': ['.js', '.jsx'],
        'import/resolver': { node: { extensions: ['.js', '.jsx', '.tsx', '.ts'] } },
      },
    },
  },
};
